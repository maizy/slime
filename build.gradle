buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:1.0.1'
  }
}

plugins {
  id 'java'
  id 'maven'
  id 'scala'
  id 'com.github.maiflai.scalatest' version '0.22'
  id 'com.github.johnrengelman.shadow' version '2.0.4'
}

ext {
  scalaMajorVersion = '2.12'
  scalaMinorVersion = '6'
  scalaVersion = "${scalaMajorVersion}.${scalaMinorVersion}"
  catsVersion = '1.1.0'
  jLineVersion = '3.8.0'
}

group = 'space.maizy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

task wrapper(type: Wrapper) {
  gradleVersion = '4.7'
  distributionType = 'all'
}

allprojects {
  apply plugin: 'java'
  apply plugin: 'scala'
  apply plugin: 'scalaStyle'
  apply plugin: 'com.github.maiflai.scalatest'

  repositories {
    mavenCentral()
  }

  dependencies {
    compile "org.scala-lang:scala-library:${scalaVersion}"
    compile "org.scala-lang:scala-reflect:${scalaVersion}"

    testCompile "org.scalatest:scalatest_${scalaMajorVersion}:3.0.4"
    testRuntime 'org.pegdown:pegdown:1.4.2'
  }

  scalaStyle {
    configLocation = "$rootProject.projectDir/scalastyle-config.xml"
    includeTestSourceDirectory = true
    source = 'src/main/scala'
    testSource = 'src/test/scala'
  }

  test {
    dependsOn scalaStyle
  }

  tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
        '-Xlint:_',
        '-feature',
        '-Xfatal-warnings',
        '-Ypartial-unification',
        '-Ywarn-dead-code',
        '-Ywarn-inaccessible',
        '-Ywarn-infer-any',
        '-Ywarn-nullary-override',
        '-Ywarn-nullary-unit',
        '-Ywarn-numeric-widen'
    ]
  }
}

project('slime') {
  dependencies {
    compile "org.typelevel:cats-core_${scalaMajorVersion}:${catsVersion}"
  }
}


project('slime-jline3') {
  dependencies {
    compile project(':slime')
    compile "org.jline:jline-terminal:${jLineVersion}"
    compile "org.jline:jline-reader:${jLineVersion}"
  }
}

project('slime-test-spec') {
  dependencies {
    compile project(':slime')
  }
}

def applyAppOptions = { Project p, String mainClass ->
  p.with {

    apply plugin: 'application'
    mainClassName = mainClass
    apply plugin: 'com.github.johnrengelman.shadow'

    jar {
      manifest {
        attributes 'Main-Class': mainClass
      }
    }

    shadowJar {
      classifier ''
    }
  }
}

project('slime-test-app') {
  applyAppOptions(it, 'space.maizy.slime.test.app.SlimeTestApp')
  dependencies {
    compile project(':slime-test-spec')
  }
}

project('slime-jline3-test-app') {
  applyAppOptions(it, 'space.maizy.slime.test.jline.SlimeJline3TestApp')
  dependencies {
    compile project(':slime-test-spec')
    compile project(':slime-jline3')
  }
}
